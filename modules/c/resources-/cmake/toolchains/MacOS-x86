set(CMAKE_SYSTEM_NAME Darwin)
set(CMAKE_SYSTEM_PROCESSOR x86)

set(_tc_triple "i386-apple-darwin15")

set(_tc_sdk /macos/MacOSX10.11.sdk)

set(CMAKE_FIND_ROOT_PATH "${_tc_sdk}")
# search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(CMAKE_ASM_COMPILER clang   CACHE FILEPATH "Assembler")
set(CMAKE_C_COMPILER   clang   CACHE FILEPATH "C Compiler")
set(CMAKE_CXX_COMPILER clang++ CACHE FILEPATH "C++ Compiler")

set(CMAKE_AR                ${_tc_triple}-ar                CACHE FILEPATH "ar")
set(CMAKE_RANLIB            ${_tc_triple}-ranlib            CACHE FILEPATH "ranlib")
set(CMAKE_INSTALL_NAME_TOOL ${_tc_triple}-install_name_tool CACHE FILEPATH "install_name_tool")

#set(CMAKE_ASM_COMPILER_TARGET ${_tc_triple} CACHE STRING "Assembler Target")
#set(CMAKE_C_COMPILER_TARGET   ${_tc_triple} CACHE STRING "C Target")
#set(CMAKE_CXX_COMPILER_TARGET ${_tc_triple} CACHE STRING "CXX Target")

set(_tc_c_flags "${_tc_c_flags} --target=${_tc_triple}")
set(_tc_c_flags "${_tc_c_flags} -Wno-unused-command-line-argument")
set(_tc_c_flags "${_tc_c_flags} -nobuiltininc")
set(_tc_c_flags "${_tc_c_flags} -nostdinc++")
#set(_tc_c_flags "${_tc_c_flags} -v")
set(_tc_c_flags "${_tc_c_flags} -mmacosx-version-min=10.11")
set(_tc_c_flags "${_tc_c_flags} -fuse-ld=/macos/bin/${_tc_triple}-ld")
set(_tc_c_flags "${_tc_c_flags} -isysroot ${_tc_sdk}")
set(_tc_c_flags "${_tc_c_flags} -iwithsysroot /usr/include/c++/v1")
set(_tc_c_flags "${_tc_c_flags} -isystem /llvm/lib/clang/8.0.0/include")

set(CMAKE_ASM_FLAGS "${_tc_c_flags}" CACHE STRING "Assembler Flags")
set(CMAKE_C_FLAGS   "${_tc_c_flags}" CACHE STRING "C Flags")
set(CMAKE_CXX_FLAGS "${_tc_c_flags}" CACHE STRING "C++ Flags")
